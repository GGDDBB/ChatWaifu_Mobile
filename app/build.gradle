plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

static def getDate(){
    def date = new Date()
    def formattedDate = date.format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+08:00"))
    return formattedDate
}

android {
    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdk rootProject.ext.minSdkVersion
        targetSdk rootProject.ext.targetSdkVersion
        consumerProguardFiles "consumer-rules.pro"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "ChatWaifu"+"_"+getDate()+".apk"
                }
            }
            buildConfigField "String","CHAT_CHPT_KEY","\"\""
            buildConfigField "String","TRANSLATE_APP_ID","\"\""
            buildConfigField "String","TRANSLATE_KEY","\"\""
        }
        debug{
            buildConfigField "String","CHAT_CHPT_KEY","${readLocalProperties("CHAT_CPT_KEY")}"
            buildConfigField "String","TRANSLATE_APP_ID","${readLocalProperties("TRANSLATE_APP_ID")}"
            buildConfigField "String","TRANSLATE_KEY","${readLocalProperties("TRANSLATE_KEY")}"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }
    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.3.1"
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation project(":VITS")
    implementation project(":Live2D")
    implementation project(":ChatGPT")
    implementation project(":Translate")
    implementation project(":Log")
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation 'com.google.code.gson:gson:2.10'
    implementation 'androidx.navigation:navigation-fragment:2.5.3'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.3'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.1'
    implementation 'com.belerweb:pinyin4j:2.5.0'
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.5.1"
    implementation "androidx.activity:activity-ktx:1.5.1"
    implementation 'androidx.annotation:annotation:1.3.0'

    def composeBom = platform('androidx.compose:compose-bom:2022.10.00')
    implementation composeBom
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.material:material'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    // Optional - Integration with activities
    implementation 'androidx.activity:activity-compose:1.6.1'
    // Optional - Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.5.1'
    // Optional - Integration with LiveData
    implementation 'androidx.compose.runtime:runtime-livedata'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
}

def readLocalProperties(String key) {
    Properties local = new Properties()
    String result = "\"\""
    try {
        local.load(new FileInputStream("${rootDir}/local.properties"))
        result = local.getProperty(key) ?: result
    } catch (Exception e) {
        println(e.getMessage())
        return ""
    }
    println("read local key...$key value is $result")
    return result
}
